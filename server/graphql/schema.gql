# -------------
# Queries

type Query {
  allWords(input: AllWordInput): [Word!]!
  getTagByTag(tag: String!): Tag
  getTagByTagId(id: Int!): Tag
  getUser(id: Int!): User
  getWordById(id: Int!): Word
  getWordByWord(word: String!): Word
  getWordDef(id: Int!): WordData
}

# -------------
# Mutations

type Mutation {
  authGoogle(accessToken: String!): User!
  updateUser(user: UpdateUserData!): User!
  addWordDef(wordDefData: AddWordData!): WordData!
  addWord(word: String!): Word!
}

# -------------
# Types

type User {
  id: Int!
  token: String
  email: String!
  username: String!
  role: String!
  createdAt: Date!
  updatedAt: Date!
  words: [Word!]!
  wordDefs: [WordData!]!
  wordsDefsVotes: [Votes!]!
}

type Word {
  id: Int!
  word: String!
  isPublish: Boolean!
  createdAt: Date!
  updatedAt: Date!
  wordData: [WordData!]!
  relatedTerms: [Word!]!
}

type WordData {
  id: Int!
  word_id: Int!
  user_id: Int!
  votes: Int!
  definition: String!
  createdAt: Date!
  updatedAt: Date!
  word: Word!
  user: User!
  tags: [Tag!]!
}

type Tag {
  id: Int!
  tag: String!
  createdAt: Date!
  updatedAt: Date!
  wordsDefs: [WordData!]!
}

type Votes {
  user_id: Int!
  word_data_id: Int!
  value: Int!
  wordData: WordData!
  user: User!
}

# -------------
# Input types

input UpdateUserData {
  email: String
  username: String
}

input AddWordDef {
  word_id: Int!
  definition: String!
}

input AddWordData {
  word: String!
  tags: [AddWordDataTag!]
  definition: String!
}

input AddWordDataTag {
  tag: String!
}

input AllWordInput {
  asc: Boolean
  isPublish: Boolean
  sortBy: AllWordsSort
}

# -------------
# Scalars

scalar Date

# -------------
# Enums

enum AllWordsSort {
  createdAt
  id
  isPublish
  updatedAt
  word
}
